FROM rocker/geospatial:latest
MAINTAINER "Noam Ross" ross@ecohealthalliance.org

## Install stuff
### Shiny
#RUN export ADD=shiny && bash /etc/cont-init.d/add
ADD latest-rstudio-preview.R /latest-rstudio-preview.R
## Installs to help install
RUN apt-get update && apt-get install -y --force-yes --allow-unauthenticated --no-install-recommends --no-upgrade \
   curl gnupg gnupg2 apt-transport-https dirmngr libclang-dev software-properties-common \
 && echo "deb http://dev.monetdb.org/downloads/deb/ stretch monetdb" > /etc/apt/sources.list.d/monetdb.list \
 && echo "deb-src http://dev.monetdb.org/downloads/deb/ stretch monetdb" >> /etc/apt/sources.list.d/monetdb.list \
 && wget -q --output-document=- https://www.monetdb.org/downloads/MonetDB-GPG-KEY |  apt-key add - \
 && AZ_REPO=$(lsb_release -cs) \
 && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     tee /etc/apt/sources.list.d/azure-cli.list \
 && curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add - \
### Shell tools
 && apt-get update && apt-get install -y --force-yes --allow-unauthenticated --no-install-recommends --no-upgrade \
     curl man ncdu tmux byobu htop zsh fish silversearcher-ag lsb-release mosh pv ccache golang-1.8 ruby-full monetdb5-sql monetdb-client azure-cli awscli \
### R package dependencies
     libnlopt-dev \
     libglpk-dev coinor-symphony coinor-symphony coinor-libsymphony-dev coinor-libcgl-dev \ 
      grass grass-doc grass-dev \
      python-setuptools python-dev build-essential git-core \
      libtesseract-dev libleptonica-dev tesseract-ocr-eng libpoppler-cpp-dev \
      libopenmpi-dev \
      libgoogle-perftools-dev libprotoc-dev libprotobuf-dev protobuf-compiler golang-go graphviz \
      python-pip \
      monetdb5-sql monetdb-client \
## Python stuff
 && pip install wheel setuptools --upgrade \
 && pip install virtualenv --no-cache-dir \
 && pip install h5py pyyaml requests Pillow scipy tensorflow keras \
### non-apt stuff (micro)
  && curl -sL https://gist.githubusercontent.com/zyedidia/d4acfcc6acf2d0d75e79004fa5feaf24/raw/a43e603e62205e1074775d756ef98c3fc77f6f8d/install_micro.sh | bash -s linux64 /usr/bin \
### RStudio preview version 
  && Rscript latest-rstudio-preview.R \
  && dpkg -i rstudio-server-preview-stretch-amd64.deb \
  && rm rstudio-server-preview-stretch-amd64.deb latest-rstudio-preview.R \

### Gurobi
  && wget -q http://packages.gurobi.com/7.5/gurobi7.5.2_linux64.tar.gz \
  && tar xfz gurobi7.5.2_linux64.tar.gz -C /opt \
  && rm gurobi7.5.2_linux64.tar.gz \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/  \
# Env vars
  && . /etc/environment \
  && R CMD javareconf 


ENV GUROBI_HOME=/opt/gurobi752/linux64
ENV PATH=$GUROBI_HOME/bin:$PATH \
  LD_LIBRARY_PATH=$GUROBI_HOME/lib:$LD_LIBRARY_PATH

# Set up config files
COPY config ./
RUN chmod +x /motd.sh; sync; ./motd.sh > /etc/motd; rm motd.sh \
  && mv -f rsession.conf /etc/rstudio/rsession.conf \
  && mv -f rserver.conf /etc/rstudio/rserver.conf \
  && echo "rsession-ld-library-path=$LD_LIBRARY_PATH" | tee -a /etc/rstudio/rserver.conf \
  && mv -f Rprofile.site /usr/local/lib/R/etc/Rprofile.site \
  && echo "Sys.setenv(GUROBI_HOME=\"$GUROBI_HOME\"); Sys.setenv(PATH=\"$PATH\")" | tee -a /usr/local/lib/R/etc/Rprofile.site \
  && mv -f Renviron.site /usr/local/lib/R/etc/Renviron.site \
  && mv -f bash_settings.sh /etc/bash.bashrc \
  && mv -f userconf.sh /etc/cont-init.d/conf \
  && mv -f ccache.conf /etc/ccache.conf \
  && mv -f byobu_status /usr/share/byobu/status/status \
  && mv -f gurobi.lic /opt/gurobi752/gurobi.lic \
  && ln -s /usr/bin/byobu-launch /etc/profile.d/Z98-byobu.sh \
  && echo 'set -g default-terminal "screen-256color"' | tee -a /usr/share/byobu/profiles/tmux

### R config and packages
RUN echo "CFLAGS=-w -j$(nproc)" | tee -a /usr/local/lib/R/etc/Makevars.site \
  &&  echo "CXXFLAGS=-w -j$(nproc)"  >> /usr/local/lib/R/etc/Makevars.site \
  && installGithub.r s-u/unixtools eddelbuettel/littler \
  && ln -f -s /usr/local/lib/R/site-library/littler/examples/install2.r /usr/local/bin/install2.r \
  && install2.r --error --skipinstalled \
    rJava RcppArmadillo V8 rgrass7 ROI Rglpk ROI.plugin.glpk Rsymphony ROI.plugin.symphony ddalpha lme4 MonetDBLite rstan keras caret brms rstanarm plotly rasterVis doParallel doMC here fields threejs matrixStats fasterize cowplot optimx bayesplot shinystan fst assertr jqr ape vegan officer ReporteRs rvg pkgdown RcppGSL RcppZiggurat prioritizr aws.s3 aws.signature knitcitations goodpractice xgboost \
  && Rscript -e 'install.packages("/opt/gurobi752/linux64/R/gurobi_7.5-2_R_x86_64-pc-linux-gnu.tar.gz", lib="/usr/local/lib/R/site-library", repos = NULL)'  \
## Cleanup
  && rm -rf /tmp/downloaded_packages/ /tmp/*.rds /root/tmp/downloaded_packages \
  && ccache -C \
## Turn on install parallelism after setup
  && mv -f Makevars.site /usr/local/lib/R/etc/Makevars.site \
  && echo "options(Ncpus=min(8, floor(parallel::detectCores()/2) + 1, na.rm = TRUE))" | tee -a /usr/local/lib/R/etc/Rprofile.site


## Setup SSH. s6 supervisor already installed for RStudio, so
## just create the run and finish scripts

RUN mkdir -p /var/run/sshd \
  && mkdir -p /etc/services.d/sshd \
  && echo '#!/bin/bash \nexec /usr/sbin/sshd -D' > /etc/services.d/sshd/run \
  && echo '#!/bin/bash \n service ssh stop' > /etc/services.d/sshd/finish \ 
  && sed -i 's/PermitRootLogin no/PermitRootLogin yes/' /etc/ssh/sshd_config \
  && echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config \
  && echo "AllowGroups ssh-users" >> /etc/ssh/sshd_config

## Add and run config files

## Open ports

EXPOSE 22 8787
